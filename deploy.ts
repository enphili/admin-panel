const fs = require('fs-extra')
const path = require('path')
import { exec } from 'child_process'

const PROJECT_PATH = path.resolve(__dirname) // –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
const DIST_PATH = path.join(PROJECT_PATH, 'dist') // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –±–∏–ª–¥–∞
const BACKEND_SOURCE = path.resolve(PROJECT_PATH, 'backend') // –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ PHP API
const FRONTEND_DEST = path.join('K:', 'OSPanel', 'home', 'proremont.com', 'admin') // –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ OpenServer, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∞–π—Ç–∞-–¥–æ–Ω–æ—Ä–∞
const BACKEND_DEST = path.join(FRONTEND_DEST, 'api') // –ü–∞–ø–∫–∞ –¥–ª—è backend –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞ OpenServer

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
const runCommand = (cmd: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    exec(cmd, { cwd: PROJECT_PATH }, (error, stdout, stderr) => {
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã "${cmd}":`)
        console.error(`STDOUT: ${stdout}`)
        console.error(`STDERR: ${stderr}`)
        reject(error)
      }
      
      console.log(stdout)
      console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ "${cmd}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
      resolve()
    })
  })
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const copyFiles = async (source: string, destination: string, filter?: (file: string) => boolean) => {
  if (!fs.existsSync(source)) {
    console.error(`‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${source}`)
    throw new Error(`–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${source}`)
    
  }
  
  if (!fs.existsSync(destination)) {
    console.warn(`üìÅ –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é: ${destination}`)
    fs.mkdirSync(destination, { recursive: true })
  }
  
  await fs.copy(source, destination, { filter })
  console.log(`‚úÖ –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ ${source} –≤ ${destination}`)
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const deploy = async () => {
  try {
    console.log('–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤:', PROJECT_PATH) // –í—ã–≤–æ–¥–∏–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...')
    await runCommand('npm run build')
    
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...')
    fs.emptyDirSync(FRONTEND_DEST)
    
    console.log('üìÇ –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥...')
    await copyFiles(DIST_PATH, FRONTEND_DEST)
    
    console.log('üìÇ –ö–æ–ø–∏—Ä—É–µ–º backend...')
    await copyFiles(BACKEND_SOURCE, BACKEND_DEST, (file) => !file.endsWith('.log'))
    
    console.log('‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–ø–ª–æ—è:')
    if (error instanceof Error) {
      console.error(error.message)
      console.error(error.stack)
    } else {
      console.error(error)
    }
    throw error
  }
}

// –ó–∞–ø—É—Å–∫
deploy()
  .then(() => console.log('‚úÖ Success!'))
  .catch(err => console.error('‚ùå Error!:', err))